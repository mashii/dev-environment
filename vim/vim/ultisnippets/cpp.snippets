priority -50
# We want to overwrite everything in parent ft.
priority -49


global !p

def GenCppFuncDef(snip, class_name, memfunc):
    pos = memfunc.rfind(")")
    if pos == -1:
        return

    number = 1
    while pos >= 0 and number != 0:
        pos -= 1
        if memfunc[pos] == ')':
            number += 1
        elif memfunc[pos] == '(':
            number -= 1

    if pos == -1:
        return

    param = memfunc[pos:]
    prefix = memfunc[:pos].strip()
    pos = prefix.rfind(" ")
    if pos == -1:
        pos = prefix.rfind("\t")
    if pos == -1:
        pos = prefix.rfind("\n")
    if pos == -1:
        return

    func_name = prefix[pos+1:]
    ret_type = prefix[:pos+1]

    if pos != -1:
        snip += ret_type + class_name + "::" + func_name + param + "\n{\n    // TODO return\n}\n"

def GetFunctionList(args):
    args_list = [ arg.strip() for arg in args.split(';') if arg.strip() ]
    return args_list

def GenCppFuncDefList(snip, class_name, args):
    func_list = GetFunctionList(args)
    for func in func_list:
        GenCppFuncDef(snip, class_name, func)

endglobal


snippet cl "class define"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
    ${1/(\w+).*/$1/}(${4:/* args */});
    virtual ~${1/(\w+).*/$1/}();
    ${2:// function}

private:
    ${3:// member}
}; /* class ${1/(\w+).*/$1/} */

$1::$1($4)
{
}

$1::~$1()
{
}
`!p
GenCppFuncDefList(snip, t[1], t[2])
`
endsnippet

snippet ns "namespace .. (namespace)"
namespace ${1:name}
{
    ${2}
} /* namespace $1 */
endsnippet

snippet is "#include <...>"
#include <${1:stdio.h}>
endsnippet

snippet iq "#include ''...''"
#include "${1:stdio.h}"
endsnippet

snippet use "using namespace ${1:std};"
using namespace ${1:std};
endsnippet

## if else statment
snippet if "if"
if (${1:true}) {
    $2
}
endsnippet

snippet ifel "if .. else .."
if (${1:true}) {
    $2
} else {
    $3
}
endsnippet

snippet else "else ..."
else {
    $1
}
endsnippet

snippet elif "else if ... "
else if (${1:true}) {
    $2
}
endsnippet


## for statment
snippet fori "for(;;)"
for (int ${1:i}=0; $1<${2:n}; ++$1) {
    $3
}
endsnippet

snippet fora "for const auto"
for (auto &${1:it} : ${2:container}) {
    $3
}
endsnippet

snippet forca "for const auto"
for (const auto &${1:it} : ${2:container}) {
    $3
}
endsnippet

## while statment
snippet while "while ..."
while(${1:true}) {
    $2
}
endsnippet


snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> ${0:map};
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:int}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <class ${1:T}>
endsnippet


snippet main "main function"
int main(int argc, char *argv[])
{
    $1
    return 0;
}
endsnippet






# for test cpp file
snippet test "sample cpp source file"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <list>

using namespace std;

int main(int argc, char *argv[])
{
    cout << "test" << endl;
    return 0;
}
endsnippet

snippet struct "c struct"
struct $1 {
    $2
};
endsnippet

# vim:ft=snippets:
